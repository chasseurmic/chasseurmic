<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: push notifications | Cocoa Hunter]]></title>
  <link href="http://chasseurmic.github.com/chasseurmic/blog/categories/push-notifications/atom.xml" rel="self"/>
  <link href="http://chasseurmic.github.com/chasseurmic/"/>
  <updated>2013-08-22T10:06:12+02:00</updated>
  <id>http://chasseurmic.github.com/chasseurmic/</id>
  <author>
    <name><![CDATA[Michelangelo Chasseur]]></name>
    <email><![CDATA[chasseurmi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APNS. Pushing the limits of your notifications.]]></title>
    <link href="http://chasseurmic.github.com/chasseurmic/blog/2013/08/18/apns-pushing-the-limits-of-your-notifications/"/>
    <updated>2013-08-18T22:04:00+02:00</updated>
    <id>http://chasseurmic.github.com/chasseurmic/blog/2013/08/18/apns-pushing-the-limits-of-your-notifications</id>
    <content type="html"><![CDATA[<p>Push notifications (APNS) are one of those pesky subjects that make developers freak out. Today there are of course different online tools that can help your APNS setup, one of them - as an exmaple - being <a href="http://urbanairship.com/">UrbanAirship</a>. The downsides of using third party services are, as always, maintenance costs as your app scales in volume, changing APIs, being subject to someone else's TOCs and the lack of control of what's really going on under the hood.</p>

<p>What we're going to do here, is leveraging open-source libraries to show a full featured solution to:</p>

<ul>
<li>build a Ruby on Rails APNS server from scratch;</li>
<li>deploy the service to Heroku;</li>
<li>integrate an iOS application and send our first push notification.</li>
</ul>


<!-- more -->


<h2>Intro</h2>

<h3>Anatomy of a push notification</h3>

<p>To get a good overview of how APNS works, you should definetely take a look at the <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW9">official documentation</a>. A brief exmaple would go like that:</p>

<ul>
<li>an user accepts to receive push notifications from an app;</li>
<li>the app register for push notifications to Apple servers;</li>
<li>the app gets a unique token from the servers</li>
<li>the app calls the web service that will let admin push notifications to registered devices</li>
<li>the server storess the device's token</li>
<li>the server starts a push notifications sending the payload to Apple servers together with the token</li>
<li>Apple servers send push notification back to the app</li>
</ul>


<h3>Requirements</h3>

<p>The following tutorial assumes you are using the following stack: Xcode 4.6.3, iOS 6.1+, Ruby 2.0.0-p195, Rails 4 (which are the newest versions of said technologies at the moment of this writing). Good chances though are that everything will work with other versions of those tools / languages.</p>

<p>And now, let's get coding!</p>

<h2>Setting up the server</h2>

<h3>Building the Rails app</h3>

<p>So, let's start from the server side of things. Open the Terminal, navigate to the directory you want your application to reside in, and type <code>rails new APNS</code>.
Open your Gemfile and add the following line at the end of the file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;apns&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let's scaffold a controller. From the Terminal run <code>rails g controller home index</code>. And in your <code>config/routes.rb</code>let's default your root route to the index action/view of the controller you just generated. Your routing file should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">APNS</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;home/index&quot;</span>
</span><span class='line'>  <span class="n">root</span> <span class="s1">&#39;home#index&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let's now create a model for the devices. We're just going to persist to the database the unique token of each device (the one basically that will be sent to Apple servers in order to handle notifications). From the Terminal run <code>rails g model Device token</code>. Let's also verify that tokens are indeed unique by enforcing a model validation inside your model file.</p>

<p>Your <code>app/model/device.rb</code> should now look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;== Schema Information&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Table</span> <span class="nb">name</span><span class="p">:</span> <span class="n">devices</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;#&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nb">id</span>         <span class="ss">:integer</span>          <span class="ow">not</span> <span class="n">null</span><span class="p">,</span> <span class="n">primary</span> <span class="n">key</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;token      :string(255)&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">created_at</span> <span class="ss">:datetime</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;updated_at :datetime&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Device</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:token</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Migrate your database with <code>rake db:migrate</code>. We're now ready to implement a very simple API that we'll be using from our client to register the device's token.</p>

<p>Inside your <code>routes.rb</code> file define two new routes:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/register_device/:token&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#register_device_with_token&#39;</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/send_notification/:token&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;home#send_notification&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Modify your <code>home_controller.rb</code> accordingly.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">http_basic_authenticate_with</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;basic_auth_username&quot;</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="s2">&quot;easy_password&quot;</span> <span class="c1">#, except: :index&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@devices = Device.all</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">register_device_with_token</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Device.create(:token =&amp;gt; params[:token])</span>
</span><span class='line'><span class="sr">redirect_to home_index_path</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">send_notification</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;logger.info &quot;Device token registrato: &quot; + params[:token].to_s</span>
</span><span class='line'><span class="sr">APNS.send_notification(params[:token].to_s, &#39;Hello from Rails app!&#39; )</span>
</span><span class='line'><span class="sr">redirect_to home_index_path, :notice =&amp;gt; &quot;Notification sent to device </span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:token</span><span class="o">]</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What are we doing here?</p>

<ul>
<li>in the <code>index</code> action we are retrieving from the database an array of all the devices currently registered on the server app. Later on we are going to modify the corresponding view in order to visualize those devices. Of course this is just for testing purposes, you wouldn't want to do such a thing in your production app!</li>
<li>in the <code>register_device_with_token</code> method we're just creating a new device with the token passed in by the mobile device as a parameter in the URL string. To take a peak at what's coming, from the iOS device will be making up the URL like so:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@%@%@&quot;</span><span class="p">,</span> <span class="n">BASE_URL</span><span class="p">,</span> <span class="s">@&quot;/register_device/&quot;</span><span class="p">,</span> <span class="n">deviceTokenAsString</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>in the <code>send_notification</code> action we are leveraging the power of the <a href="https://github.com/jpoz/APNS">APNS gem</a> to send the notification to the device by passing in a token from the view;</li>
<li>with the initial <code>http_basic_authenticate_with</code> method, we are using some basic authentication to make indiscrete eyes stay away from our service.</li>
</ul>


<p>And finally, here's our <code>/app/views/home/index.html.erb</code> view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;Listing devices&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;table&gt;</span>
</span><span class='line'><span class="x">  &lt;tr&gt;</span>
</span><span class='line'><span class="x">    &lt;th&gt;Token&lt;/th&gt;</span>
</span><span class='line'><span class="x">    &lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'><span class="x">    &lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'><span class="x">    &lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'><span class="x">  &lt;/tr&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="vi">@devices</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">device</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;tr&gt;</span>
</span><span class='line'><span class="x">    &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">device</span><span class="o">.</span><span class="n">token</span> <span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">    &lt;td&gt;</span><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Send notification&#39;</span><span class="p">,</span>  <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;send_notification&quot;</span><span class="p">,</span> <span class="ss">token</span><span class="p">:</span> <span class="n">device</span><span class="o">.</span><span class="n">token</span><span class="cp">%&gt;</span><span class="x">&lt;/td&gt;</span>
</span><span class='line'><span class="x">  &lt;/tr&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/table&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We iterate thru the devices and list them in a simple table. On the right of each device we define a link - <em>Send notification</em> -  that will let us send the push notification to the selected device. The APNS gem supports sending a single notification to multiple devices at once by passing an array of tokens to Apple's servers, but we ain't going to cover this here since it's out of scope for this demo.</p>

<p>If you now run your server (<code>rails s</code>) and visit from your browser the following URL <code>http://localhost:3000/register_device/any_token</code> you should be able to register devices by passing in a string of characters (or numbers by the way). When you visit your root path <code>http://localhost:3000</code> you should then see a list of them.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/rails_1.jpg"></p>

<p>Now that we got our feet wet and our first API calls are working, let's get onto the boring stuff...</p>

<h3>Yo, get those certificates!</h3>

<p>Whenever you need to generate a digital certificate, you need to provide a Certificate Signing Request (CSR). When you create the CSR, a new private key is generated and inserted into your keychain. You then need to upload the CSR to a certificate authority (in this case to Apple's iOS Developer Portal), which will generate the certificate that you're then going to use to create the .pem file to use in your Rails backend. Seems pretty complex... and it is! Let's break down things a little and proceed step by step.</p>

<p>Open Keychain Access on your Mac (you can find it in <code>/Applications/Utilities</code>) and choose the menu option <code>Request a Certificate from a Certificate Authority...</code>.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/keychain_1.jpg"></p>

<p>Fill in the email address and save the CSR to disk.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/keychain_2.jpg"></p>

<p>Now inside Keychain, in the <em>Keys</em> section you should see that a new private key has appeared. Now go at <a href="https://developer.apple.com/">developer.apple.com</a> and sign into your developer account.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/adc_1.jpg"></p>

<p>Once logged into the Dev Center, create a new AppID for the app that will be accepting push notifications. Enter the description, bundle ID (we're going to use <code>re.touchwa.cocoahunterapnstest</code> for our test app) and check the <em>Push Notifications</em> option in the App Services section at the bottom. Complete the registration of the new AppID by confirming and submitting the data.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/adc_2.jpg"></p>

<p>Now we are all set up and ready to create a new certificate. Go into the <code>Certificates</code> section and click on the top right + button to create a new one.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/adc_3.jpg"></p>

<p>Since development and production environments require different types of certificates, for our test purposes we are going to use the sandboxed environment, but for production apps you should of course choose the production ceertificate.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/adc_4.jpg"></p>

<p>Next step is associating the certificate you're generating with the AppID you created in the previous step. You then should be asked to upload the CSR request you generated in Keychain.app (by default they are named <code>CertificateSigningRequest.certSigningRequest</code>). Choose the file and upload it, then click <code>Generate</code>. Once the certificated is ready, click on download. Double click on the <code>.cer</code> file to import it into the Keychain. Almost there!</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/adc_5.jpg"></p>

<p>We now need to convert the certificate in what is called a PEM (Privacy Enhanced Mail) file (if you really want ot dive deeper into the subject, a good starting point would be <a href="http://en.wikipedia.org/wiki/X.509">this Wikipedia article</a>). With the <code>aps_development.cer</code> in the keychain do the following:</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/keychain_4.jpg"></p>

<ul>
<li>Launch Keychain Access and from the login keychain, filter by the Certificates category. You will see an expandable option called Apple Development Push Services;</li>
<li>Right click on Apple Development Push Services > Export Apple Development Push Services ... Save the file again as <code>APNSCocoaHunterTest.p12</code> somewhere you can access it. There is no need to enter a password.</li>
<li>Finally from the Termianal run the following:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl pkcs12 -in APNSCocoaHunterTest.p12 -out APNSCocoaHunter.pem -nodes -clcerts
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To test that the certificate you created is actually working, you should be able to run the following command in the Terminal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert APNSCocoaHunter.pem
</span><span class='line'>Enter pass phrase <span class="k">for </span>APNSCocoaHunter.pem:
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Leave the password empty and press Enter, you should see some text scrolling, then if you press Enter again at the prompt the server should disconnect. That's a good sign that things are working correctly!</p>

<p>If you're still with me, it's now time to wrap things up with the server side of things! Let's go configure the APNS gem.</p>

<h3>Configuring the APNS gem</h3>

<p>Back to the Rails app, copy the <code>.pem</code> file (APNSCocoaHunter.pem) into your <code>lib</code> folder (actually you can put it wherever you want). In your <code>config/application.rb</code> file paste the following code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">APNS</span><span class="o">.</span><span class="n">pem</span>  <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;lib&#39;</span><span class="p">,</span><span class="s1">&#39;APNSCocoaHunter.pem&#39;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;this is the file you just created&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">APNS</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="mi">2195</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you see the <code>APNS.pem</code> snippet is referencing the file in the 'lib' folder. Should you place your file anywhere else, be sure to input the right path so that the gem will be able to find it. Let's now deploy our app to Heroku so that we can test it on real devices!</p>

<h3>Deploying to Heroku</h3>

<p>First of all, let's make sure that in our Gemfile we're actually using PostgreSQL as a DB in production instead of SQLite (which of course is handy for development purposes, but nothing more).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:development</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I assume you already have an Heroku account and you have correctly setup your CLI. For further instructions and an introductory tutorial on this topic you can head to <a href="https://devcenter.heroku.com/articles/heroku-command">Heroku's website</a>.</p>

<p>To actually deploy a Rails app to Heroku (or any other suported app for that matter), you need to first setup a git repo. We should have done this from the beginning, but we actually haven't written too much code and - by the way - this is just a tutorial. Anyway, in a production app it's always best to commit early and commit often. That said, let's init our repo. From the Terminal run (from inside your Rails app folder):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m <span class="s2">&quot;Inital commit&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now you can create you Heorku app by running (from the same folder where you created your git repo):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create desired-app-name
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>...then:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the app is uploaded and the slug compiled, migrate your DB:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku run rake db:migrate
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now your backend should be ready to go. Run <code>heroku open</code> and your default browser should be pointed to the newly created web app. Of course you will be prompted with a basic auth HTTP form (since you requested it in <code>home_controller.rb</code>). Fill in the credentials and, boom!, you're good to go. Now let's move on to the mobile side of things.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/basic_auth.png"></p>

<h2>Setting up the mobile client</h2>

<h3>Generate the provisioning profile</h3>

<p>First thing first: generate the provisionig profile for your app. Head over to the iOS Dev Center and click on Provisioning Profile in the sidebar. Let's make a development profile for the time being. Click on the + button on the upper right of the screen:</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/provisioning_1.jpg"></p>

<p>Choose the <code>iOS App Development</code> profile.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/provisioning_2.jpg"></p>

<p>Select the app ID you previously created to generate the certificate:</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/provisioning_3.jpg"></p>

<p>Select the certificate:</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/provisioning_4.jpg"></p>

<p>Select the development devices you wish to install your app on:</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/provisioning_5.jpg"></p>

<p>Name the profile and generate:</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/provisioning_6.jpg"></p>

<p>Finally, download it and add the provisioning profile to Xcode by double-clicking it or dragging it onto the Xcode icon.</p>

<h3>Create the project</h3>

<p>Now open Xcode and create a new empty project. We are not going to make anything in the UI and we will dump all the code we need in the AppDelegate, so you can use whichever template you want to. Note that you should choose a Product Name and Company Identifier that correspond to the app ID that you earlier created in the Provisioning Portal.</p>

<h3>The actual code</h3>

<p>Download and import into your project the following two files, <code>NSData+Base64.h</code> and <code>NSData+Base64.m</code>, from <a href="https://github.com/l4u/NSData-Base64">this Github repo</a>. We are going to use this NSData category for the 'stringification' of our token later on. If you created your project as ARC-enabled (as I expect you did), you need to add the flag <code>-fno-objc-arc</code> to that file. Adding the flag is just a matter of going in Targets > Build Phases > Compile Sources. You have to double click on the right column of the row under Compiler Flags.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/xcode_1.jpg"></p>

<p>In your AppDelegate <code>.m</code> file, add at the top the following lines:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="s">&quot;NSData+Base64.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">BASE_URL</span> <span class="s">@&quot;http://your-app-address.herokuapp.com/&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Of course in the BASE_URL <code>#define</code> you should substitute your Heroku URL.</p>

<p>Now, inside you <code>-(BOOL)application:didFinishLaunchingWithOptions:</code> method, add the following call to start the process for registering the device to our backend service:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerForRemoteNotificationTypes:</span>
</span><span class='line'> <span class="p">(</span><span class="n">UIRemoteNotificationTypeBadge</span> <span class="o">|</span> <span class="n">UIRemoteNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIRemoteNotificationTypeAlert</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Everything else is happening in the following method (which is basically a callback that returns the device token as raw data bytes): <code>-(void)application:didRegisterForRemoteNotificationsWithDeviceToken:</code>.</p>

<p>So, here's the code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="n">Push</span> <span class="n">Notifications</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">deviceToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// Convert the binary data token into an NSString (see below for the implementation of this function)</span>
</span><span class='line'>  <span class="n">NSString</span> <span class="o">*</span><span class="n">deviceTokenAsString</span> <span class="o">=</span> <span class="n">stringFromDeviceTokenData</span><span class="p">(</span><span class="n">deviceToken</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// Show the device token obtained from apple to the log</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;deviceToken: %@&quot;</span><span class="p">,</span> <span class="n">deviceTokenAsString</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">NSURL</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@%@%@&quot;</span><span class="p">,</span> <span class="n">BASE_URL</span><span class="p">,</span> <span class="s">@&quot;/register_device/&quot;</span><span class="p">,</span> <span class="n">deviceTokenAsString</span><span class="p">]];</span>
</span><span class='line'>  <span class="n">NSURLRequest</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSURLConnection</span> <span class="o">*</span><span class="n">connection</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">connectionWithRequest:</span><span class="n">request</span> <span class="nl">delegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">connection</span> <span class="n">start</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// NSURLConnection Delegates</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">connection</span> <span class="nl">didReceiveAuthenticationChallenge:</span><span class="p">(</span><span class="n">NSURLAuthenticationChallenge</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">challenge</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">([</span><span class="n">challenge</span> <span class="n">previousFailureCount</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;received authentication challenge&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSURLCredential</span> <span class="o">*</span><span class="n">newCredential</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLCredential</span> <span class="nl">credentialWithUser:</span><span class="p">[</span><span class="n">self</span> <span class="n">username</span><span class="p">]</span>
</span><span class='line'>                                                                <span class="nl">password:</span><span class="p">[</span><span class="n">self</span> <span class="n">password</span><span class="p">]</span>
</span><span class='line'>                                                             <span class="nl">persistence:</span><span class="n">NSURLCredentialPersistenceForSession</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;credential created&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">challenge</span> <span class="n">sender</span><span class="p">]</span> <span class="nl">useCredential:</span><span class="n">newCredential</span> <span class="nl">forAuthenticationChallenge:</span><span class="n">challenge</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;responded to authentication challenge&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;previous authentication failure&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFailToRegisterForRemoteNotificationsWithError:</span><span class="p">(</span><span class="n">NSError</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Failed to get token, error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">username</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">@&quot;basic_auth_username&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">password</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">@&quot;easy_password&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NSString</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">stringFromDeviceTokenData</span><span class="p">(</span><span class="n">NSData</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">deviceToken</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">deviceToken</span> <span class="n">bytes</span><span class="p">];</span>
</span><span class='line'><span class="n">NSMutableString</span><span class="o">*</span> <span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="n">string</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">[</span><span class="n">deviceToken</span> <span class="n">length</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">token</span> <span class="nl">appendFormat:</span><span class="s">@&quot;%02.2hhX&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">token</span> <span class="n">copy</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let's take a look at the code by steps:</p>

<ul>
<li>first we convert with a C function the token (NSData) we get back from the callback to an NSString that we are going to post to our Rails server;</li>
<li>then we build the URL and we instantiate a request, and we start the connection by registering the AppDelegate as the NSURLConnection's delegate;</li>
<li>As expected, we should get from our backend an authentication challenge. We're taking care of that by instantiating an NSURLCredential and responding to the challenge with the correct username and password.</li>
</ul>


<p>Run your app on an actual device. The screen of course will be blank, but as soon as your app opens, it will try to communicate with the backend and register for push notifications. Now if you open your Rails app beckend, you should see the token listed in the index page!</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/list_token.jpg"></p>

<h2>Sending your first push notification!</h2>

<p>Here comes the moment of truth! Press the 'Send notification' link to the right of the token. Boom! Your app should receive the push notification as expected.</p>

<p><img src="http://cocoahunter-blog.s3.amazonaws.com/apns-test/notification.jpg"></p>

<p>So this was a pretty long run, but we've covered quite some stuff. This is just a basic intro (though fully functional) of how to build an APNS server. The APNS gem of course will let you send notifications in batch to multiple devices at once. Just read the documentation. Congratulations, you've just built your own push notification service!</p>

<p>The whole code can be found on GitHub:</p>

<ul>
<li><a href="https://github.com/chasseurmic/APNS-Basic-Rails-Server">Rails server app</a></li>
<li><a href="https://github.com/chasseurmic/APNS-Basic-iOS-Client">iOS mobile app</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
