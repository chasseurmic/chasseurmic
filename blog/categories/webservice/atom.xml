<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webservice | Cocoa Hunter]]></title>
  <link href="http://chasseurmic.github.com/chasseurmic/blog/categories/webservice/atom.xml" rel="self"/>
  <link href="http://chasseurmic.github.com/chasseurmic/"/>
  <updated>2013-08-21T18:22:25+02:00</updated>
  <id>http://chasseurmic.github.com/chasseurmic/</id>
  <author>
    <name><![CDATA[Michelangelo Chasseur]]></name>
    <email><![CDATA[chasseurmi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra takes the stage, Padrino the cannoli.]]></title>
    <link href="http://chasseurmic.github.com/chasseurmic/blog/2013/01/05/sinatra-takes-the-stage/"/>
    <updated>2013-01-05T21:43:00+01:00</updated>
    <id>http://chasseurmic.github.com/chasseurmic/blog/2013/01/05/sinatra-takes-the-stage</id>
    <content type="html"><![CDATA[<p>I’ve been recently hard at work on strenghtening my skills on backend development for iOS apps. As I said in one of my previous posts almost every mobile app nowadays requires some sort of remote database to retrieve and sync data. Often times though, what we really need is some sort of very basic API. Ruby on Rails certainly can deliver what it promises, it’s a powerhorse, but it can also become cumbersome for some simple tasks. What I’m gonna briefly review today are <a href="http://www.sinatrarb.com/">Sinatra</a> and <a href="http://www.padrinorb.com/">Padrino</a>, two somehow lightweight-ish alternatives to Rails.</p>

<h2>Easy singing with Sinatra!</h2>

<p>Sinatra is technically a Ruby DSL, a <em>domain specific language</em>. It’s not a framework, it’s kind of a <em>specific language layer</em> – on top of Ruby and Thin – that lets you implement in an easy and fast way a working web server.</p>

<p>Let’s get straight to an example. The following code sets up a server and responds with a simple <em>"Hello world!"</em> to each request made to the base url. Create a new <em>.rb</em> file and copy the following snippet in it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Hello world!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then run it from the terminal with <code>ruby your_file_name.rb</code>. You should see something similar to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;blockquote>&lt;p>ruby sinatra.rb
</span><span class='line'>== Sinatra/1.3.3 has taken the stage on 4567 for development with backup from Thin&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;blockquote>&lt;p>Thin web server (v1.3.1 codename Triple Espresso)
</span><span class='line'>Maximum connections set to 1024
</span><span class='line'>Listening on 0.0.0.0:4567, CTRL+C to stop</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote>

<p>Now you can visit <em>localhost:4567</em> and, voilà, you webpage is served!</p>

<!-- more -->


<p>The good thing about Sinatra is that it's lightweight, fast and very easy to setup. Plus the code it's neat and readable: all the CRUD methods are explicit in that the routes are defined with HTTP verbs (get, post, put, delete). The bad thing – which for someone might be a good thing – is that there's no <em>magic</em> in it: I mean no helpers, no generators, not all the little nice conventions Rails has accustomed us to and is renowned for. If you want to setup even a simple API in Sinatra you have to code almost everything by hand. That's where Padrino comes in…</p>

<h2>Padrino</h2>

<p>Padrino is a web framework for Sinatra. Padrino is Sinatra at the core; according to Padrino's project <a href="http://www.padrinorb.com/">home page</a>, <em>Padrino was created to make it fun and easy to code more advanced web applications while still adhering to the spirit that makes Sinatra great!</em>.</p>

<p>Padrino combines the simplicity of Sinatra with some of the more useful functions of Rails (generators, basic scaffolding, helpers, form builders…). And it's even got a nice admin panel right out of the box (Django-style if you know what I mean) which is a very useful feature if you want to run an API where only a predefined number of admins can insert and modify data.</p>

<h3>API with Padrino</h3>

<p>We'll now build the same API we built in a <a href="http://cocoahunter.com/blog/2012/12/17/api-for-ios-app/">previous post</a> so you'll see how Padrino fares against Rails.</p>

<p>Run the following code in you terminal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install padrino
</span><span class='line'>padrino g project padrino-api -e haml -d activerecord -b
</span><span class='line'>cd padrino-api
</span><span class='line'>padrino g admin
</span><span class='line'>padrino g model product name:string -a app
</span><span class='line'>padrino rake ar:migrate seed
</span><span class='line'>padrino g admin_page product
</span><span class='line'>padrino start</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That's it! You're ready to go. What you've just done is:</p>

<ul>
<li>creating an app;</li>
<li>scaffolding the admin panel;</li>
<li>creating a basic product model (with simply a name of <em>string</em> type);</li>
<li>creating the tables in the database and seeding it with some informations (email, password) of the admin user;</li>
<li>generating the necessary views inside the admin panel to manage your newly created model;</li>
<li>starting the app.</li>
</ul>


<p>If you now visit <em>localhost:3000/admin</em> you should be able to login and see a section dedicated to your Product model. You can now start adding some objects to your DB. One last thing before being able to consume the API: inside your project directory, in you <em>app.rb</em> file add the following snippet.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@products</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="vi">@products</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code is basically telling your app that whenever a request hits the base url it has to retrieve all the <em>Product</em> objects, serialize them and respond with some JSON. That's it. If you now visit <em>localhost:3000/</em> you should get something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="p">{</span><span class="nt">&quot;created_at&quot;</span><span class="p">:</span><span class="s2">&quot;2013-01-05T23:23:42+01:00&quot;</span><span class="p">,</span><span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Book&quot;</span><span class="p">,</span><span class="nt">&quot;updated_at&quot;</span><span class="p">:</span><span class="s2">&quot;2013-01-05T23:28:07+01:00&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;created_at&quot;</span><span class="p">:</span><span class="s2">&quot;2013-01-05T23:28:13+01:00&quot;</span><span class="p">,</span><span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Movie&quot;</span><span class="p">,</span><span class="nt">&quot;updated_at&quot;</span><span class="p">:</span><span class="s2">&quot;2013-01-05T23:28:13+01:00&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;created_at&quot;</span><span class="p">:</span><span class="s2">&quot;2013-01-05T23:28:17+01:00&quot;</span><span class="p">,</span><span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;iPhone&quot;</span><span class="p">,</span><span class="nt">&quot;updated_at&quot;</span><span class="p">:</span><span class="s2">&quot;2013-01-05T23:28:17+01:00&quot;</span><span class="p">}</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Cool, huh? In a couple of minutes we have defined and set up an API. Of course it's still very basic stuff, but with some polishing it shouldn't take you much effort to build a more solid API for your mobile app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API for iOS - Part 2]]></title>
    <link href="http://chasseurmic.github.com/chasseurmic/blog/2012/12/28/api-for-ios-part-2/"/>
    <updated>2012-12-28T12:57:00+01:00</updated>
    <id>http://chasseurmic.github.com/chasseurmic/blog/2012/12/28/api-for-ios-part-2</id>
    <content type="html"><![CDATA[<p>In our last post we saw how to configure a Rails environment, create and locally serve a very basic API. You should now be able insert and persist new objects (we called them Products) in the local database via the very simple interface Rails created for you and query them as JSON from <a href="http://localhost:3000/products.json">http://localhost:3000/products.json</a>.</p>

<p>I inserted a few objects and this is the JSON I can retrieve from my API:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-12-28T12:02:08Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Book&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;updated_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-12-28T12:02:08Z&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-12-28T12:02:16Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Movie&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;updated_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-12-28T12:02:16Z&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-12-28T12:02:32Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;iPhone&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;updated_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-12-28T12:02:32Z&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since each object has a property called name, basically a simple string, we want to build an iOS app that retrieves and parses the JSON, and then displays the results in a table view. Pretty basic stuff, but at the heart of much more complex projects.</p>

<!-- more -->


<h2>Starting a new Xcode project.</h2>

<p>Open Xcode and start a new project and choose the single Single View Application template.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api1.png"></p>

<p>Then type your app name, and select <em>Use Storyboards</em> and <em>Use Automatic Reference Counting</em>.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api2.png"></p>

<p>In the summary view of your project, under targets, make your app’s Deployment Target to be iOS 6.0 compatible or greater.</p>

<h2>Installing dependencies using CocoaPods</h2>

<p>To connect to our RESTful API we’re going to use <a href="http://restkit.org/">RestKit</a> an Objective-C framework for iOS that aims to simplify the interaction with RESTful web services. To manage our dependencies I suggest you use <a href="http://cocoapods.org/">CocoaPods</a>. I’m going to assume you already have CocoaPods installed on your system to continue with this tutorial (otherwise, just go to <a href="http://cocoapods.org/">here</a> and follow the instructions on how to install it). Now navigate or <em>cd</em> into you app directory and create a new file named <em>Podfile</em>. Open it and write the following:
<code>
platform :ios, '5.0'
pod 'RestKit'
</code>
Then from the command line run
<code>
pod install
</code>
You shoul now have in you project dir a file with a <code>.xcworkspace</code> extension. From now on you should always work on this file when developing your app.</p>

<h2>Customizing the storyboard</h2>

<p>Open your workspace and navigate to your MainStoryboard.storyboard file. Delete the view controller in the storyboard and replace it with a Table View Controller (drag it on the storyboard from the Object Library). You can now delete (move to trash) the two ViewController.h / ViewController.m files from the Project Navigator in the left panel.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api3.png"></p>

<p>Create (Command-N) a new Objective-C document and add it to your project.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api4.png"></p>

<p>Name it MyTableViewController and make it inherit from the UITableViewController class.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api5.png"></p>

<p>Back to the Storyboard you can now set the Class of your TableViewController to be a MyTableViewController in the Identity inspector.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api6.png"></p>

<p>You should also set the identifier of the cell to <em>Cell</em> so that we can dequeue the cell of the TableView from our code later on.
<img src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api7.png"></p>

<h2>Creating the model</h2>

<p>Create a new Objective-C (Command-N) document and make it inherit from NSObject class. I’ll simply call it Product. This is how Product.h looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Product.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">@</span><span class="n">interface</span> <span class="n">Product</span> <span class="o">:</span> <span class="n">NSObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">int</span> <span class="n">product_id</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Product.m</em> doesn’t need to be modified because with the latest release of Apple’s developer tools properties don’t need to be synthesized anymore. So we’re just declaring two properties in the header file, a name and an id.</p>

<h2>Setting up the RestKit stack</h2>

<p>Now we’re going to init the RestKit stack in order to be able to connect and retrieve data from our API.
In <em>MyTableViewController.h</em> we need to declare an Array where we will store the incoming data:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">productsArray</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In MyTableViewController.m, import the header files for RestKit and Product:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">RestKit</span><span class="o">/</span><span class="n">RestKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="s">&quot;Product.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, inside the <code>viewDidLoad</code> declare this method call:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="n">initRestKitStack</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let’s implement <code>initRestKitStack</code> method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initRestKitStack</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Set debug logging level. Set to &#39;RKLogLevelTrace&#39; to see JSON payload</span>
</span><span class='line'><span class="n">RKLogConfigureByName</span><span class="p">(</span><span class="s">&quot;RestKit/Network&quot;</span><span class="p">,</span> <span class="n">RKLogLevelTrace</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set the base URL of our API</span>
</span><span class='line'><span class="n">NSURL</span> <span class="o">*</span><span class="n">baseURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://localhost:3000&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">RKObjectManager</span> <span class="o">*</span><span class="n">objectManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKObjectManager</span> <span class="nl">managerWithBaseURL:</span><span class="n">baseURL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Enable Activity Indicator Spinner</span>
</span><span class='line'><span class="p">[</span><span class="n">AFNetworkActivityIndicatorManager</span> <span class="n">sharedManager</span><span class="p">].</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Map the JSON payload to our Product model with a dictionary</span>
</span><span class='line'><span class="n">RKObjectMapping</span> <span class="o">*</span><span class="n">mapping</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKObjectMapping</span> <span class="nl">mappingForClass:</span><span class="p">[</span><span class="n">Product</span> <span class="n">class</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">mapping</span> <span class="nl">addAttributeMappingsFromDictionary:</span><span class="err">@</span><span class="p">{</span>
</span><span class='line'>    <span class="s">@&quot;name&quot;</span><span class="o">:</span> <span class="s">@&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">@&quot;id&quot;</span><span class="o">:</span> <span class="s">@&quot;product_id&quot;</span><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">RKResponseDescriptor</span> <span class="o">*</span><span class="n">responseDescriptor</span> <span class="o">=</span> <span class="p">[</span><span class="n">RKResponseDescriptor</span> <span class="nl">responseDescriptorWithMapping:</span><span class="n">mapping</span>
</span><span class='line'>                    <span class="nl">pathPattern:</span><span class="s">@&quot;/products.json&quot;</span>
</span><span class='line'>                    <span class="nl">keyPath:</span><span class="nb">nil</span>
</span><span class='line'>                    <span class="nl">statusCodes:</span><span class="n">RKStatusCodeIndexSetForClass</span><span class="p">(</span><span class="n">RKStatusCodeClassSuccessful</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">objectManager</span> <span class="nl">addResponseDescriptor:</span><span class="n">responseDescriptor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load the object model via RestKit</span>
</span><span class='line'><span class="p">[</span><span class="n">objectManager</span> <span class="nl">getObjectsAtPath:</span><span class="s">@&quot;/products.json&quot;</span> <span class="nl">parameters:</span><span class="nb">nil</span> <span class="nl">success:</span><span class="o">^</span><span class="p">(</span><span class="n">RKObjectRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">RKMappingResult</span> <span class="o">*</span><span class="n">mappingResult</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Store the results of our query into our mutable array</span>
</span><span class='line'>    <span class="n">_productsArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithArray:</span><span class="p">[</span><span class="n">mappingResult</span> <span class="n">array</span><span class="p">]];</span>
</span><span class='line'>    <span class="c1">// Update table data after the fetch has finished</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="nl">failure:</span><span class="o">^</span><span class="p">(</span><span class="n">RKObjectRequestOperation</span> <span class="o">*</span><span class="n">operation</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code is commented inline, so you shouldn’t have any problems understanding it.  RestKit is a pretty massive framework and provides a lot of functionality, so if you think it could be of any help to you, it’d be better to read the documentation.</p>

<p>Now let’s implement the table view methods:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="n">Table</span> <span class="n">view</span> <span class="n">data</span> <span class="n">source</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Return the number of sections.</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Return the number of rows in the section.</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">_productsArray</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">UITableViewCell</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="s">@&quot;Cell&quot;</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[(</span><span class="n">Product</span> <span class="o">*</span><span class="p">)[</span><span class="n">_productsArray</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="n">name</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<h2>Build and run</h2>

<p>Now you should start your rails API server. Just cd from the command line into the appropriate directory and run <code>rails s</code>. If you build and run you iOS app you should now be seing the Table View populated with the data from your API, something like the following:</p>

<p><img class="center" src="http://cocoahunter-blog.s3.amazonaws.com/ios-api/api8.png" width="200"></p>

<h2>Conclusion</h2>

<p>Of course these are only humble beginnings, there’d still be much to say about REST APIs. The simple app we built is lacking a lot of features (the most important perhaps is data persistence on the device), but we’re on the good track. In one of my future posts I’ll talk about integration of RestKit with CoreData.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API for iOS app - part 1]]></title>
    <link href="http://chasseurmic.github.com/chasseurmic/blog/2012/12/17/api-for-ios-app/"/>
    <updated>2012-12-17T20:23:00+01:00</updated>
    <id>http://chasseurmic.github.com/chasseurmic/blog/2012/12/17/api-for-ios-app</id>
    <content type="html"><![CDATA[<p>And here we go, with out firts technical post.</p>

<p>One of the problems we, as mobile developers, have to face in almost any mid-to-high complexity project, is integrating our app with a backend. To solve this issue, the market offers today many <a href="http://en.wikipedia.org/wiki/Backend_as_a_service">BaaS</a> solutions. Just to name a few platforms that offer an iOS SDK that could be easily integrated (disclaimer: I’m not endorsing anyone or suggesting that the following are better than others):</p>

<ul>
<li><a href="https://parse.com/">Parse</a></li>
<li><a href="https://www.stackmob.com/">Stackmob</a></li>
<li><a href="http://www.appcelerator.com/">Appcelerator</a></li>
</ul>


<p>Of course there are as many advantages as drawbacks in opting for such a service. On the one side there’s the ease of use of APIs to retrieve and parse objects you need to store on those backends. On the other side you’re tying your app to a specific service and you’re exposing yourself to higher expenses (BaaS generally offer free plans for quite small applications, but if you’re going to scale then you’ll need to share your revenues not only with Apple).</p>

<p>The approach I favored in my last projects is somewhat mixed. I now tend to outsource some of the more <em>difficult</em> stuff (like user management, which requires setting up the whole signup process) and insource the development of very simple APIs.</p>

<p>I’ve been personally using Stackmob and Appcelerator backends for a couple of months. I admit they have some quite useful features, but let’s say you just need some kind of web platform (a stripped down CMS?) where you (or your clients) could input and update some basic informations. A typical example could be a product catalog: entries in the online database represent <em>goods</em>, where each good is associated to a <em>category</em>. And you just need to add, update or delete items so that your catalog is always up-to-date. This is the optimal situation where a custom, self-developed backend could make your day.</p>

<p>I will now guide you step by step in the process of creating and stubbing a very simple <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">RESTful</a> webservice made with <a href="http://rubyonrails.org/">Ruby on Rails</a> (RoR or Rails for short). In a later post I’ll talk about how to consume this webservice with an iOS application. Let’s get our hands dirty!</p>

<!-- more -->


<h2>Installing necessary software</h2>

<p>First thing first: grab a copy of <a href="http://git-scm.com/">Git</a> and install it on your Mac (current stable release at the time of this writing 1.8.0.2).</p>

<p>You’ll then need to install (or update) Ruby on your Mac. I suggest you use <a href="https://rvm.io/">rvm</a>: it’ll help you manage Ruby versions and gems (there’s even a GUI for Mac OS X - <a href="http://jewelrybox.unfiniti.com/">JewelryBox</a>). There’s plenty of documentation <a href="http://www.ruby-lang.org/en/downloads/">here</a>. Basically, from your Terminal, run the folloing command:
<code>
$ \curl -L https://get.rvm.io | bash -s stable --ruby
</code>
The above command will install both RVM and the latest version of Ruby. Then install the latest version of Ruby (1.9.3 as of this post):
<code>
rvm install 1.9.3
</code>
And use the newly installed Ruby:
<code>
rvm use 1.9.3
</code>
If you now run
<code>
ruby --version
</code>
you should see something like this:
<code>
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.4.0]
</code>
Almost done... To install rails, just type:
<code>
gem install rails
</code>
That’s it! Now we’re good to go.</p>

<h2>Set up your first RoR project</h2>

<p>Now from the terminal navigate (<em>cd</em>) into a directory where you’ll want to store the Rails project and type:
<code>
rails new my-first-api
</code>
Rails will generate a whole bunch of files. I’m not going to cover here what all those files do (you can find plenty of informations online - you could <a href="http://guides.rubyonrails.org/getting_started.html">start here</a> if you wanna learn more), but keep in mind that Rails was built with a <em>convention over configuration</em> philosophy and that therefore the command you just ran basically set up for you a fully functional application. In fact, if you cd (<code>cd my-first-api</code>) in the previously generated directory and run in the terminal:
<code>
rails server
</code>
you can start a local server to serve web pages on your machine. If you’ll now visit <a href="http://localhost:3000/">http://localhost:3000/</a> you should see the standard Rails welcome page. Congrats, you’ve just built your first RoR app!</p>

<h2>Create a basic API</h2>

<p>Now it’s time to setup a very basic API that you’ll use to populate a product table (later we’ll retrieve those products as JSON). If you’re still running you server (the one you started before with <code>rails server</code>, you can now shut it down by pressing <em>ctrl-c</em>.</p>

<p>Let’s keep things simple: products, for the time being, will be represented only by their name (in a future post I’ll show you how to add associations, a category for example).</p>

<p>So, type in the terminal:
<code>
rails generate scaffold Product name:string
</code>
The command you just ran made Rails create all the files needed (Model, Views and Controller - <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a>) to respond to <a href="http://www.informit.com/articles/article.aspx?p=1671632&amp;seqNum=5">standard RESTful actions</a>. Now you’ll need to generate the corresponding database tables (by default Rails uses <a href="http://www.sqlite.org/">SQLite</a> in a development environment):
<code>
rake db:migrate
</code>
Let’s start the server again (you can just type <code>rails s</code>) and visit <a href="http://localhost:3000/products">http://localhost:3000/products</a>. You should now be able to add, update and delete your products! The site is not very pretty, but it’s fully functional. You can already retrieve your objects in JSON format by visiting <a href="http://localhost:3000/products.json">http://localhost:3000/products.json</a>. Cool, huh?</p>

<p>In the next part I’ll show you how to easily implement a RESTful compliant iOS app to consume the webservice we just created.</p>
]]></content>
  </entry>
  
</feed>
